{
  "hash": "cdd7aafb5dc7fa29b520f5bca2efa8ff",
  "result": {
    "engine": "knitr",
    "markdown": "Nesta aula inicial, vamos explorar os conceitos básicos dos programas R e RStudio. Você aprenderá a criar e gerenciar projetos, scripts e arquivos, além de entender como salvar seu trabalho corretamente. Também veremos o passo a passo para instalar e carregar pacotes essenciais, bem como criar estruturas de dados como vetores e *data frames*. Por fim, faremos algumas operações básicas no RStudio para você começar a se familiarizar com a ferramenta.\n\n## **Configurando um Projeto no RStudio e Criando Documentos Quarto**\n\n1.  **Iniciando um Projeto no RStudio**\n\n    Para organizar os arquivos da disciplina, o primeiro passo é criar um novo projeto no RStudio, isso criará uma pasta dedicada ao seu trabalho, mantendo todos os arquivos organizados em um único local. Para isso:\n\n    1.  No menu superior do RStudio, clique em **`File >New Project… >New Directory`**.\n\n    2.  Selecione **\"`New Project`\"**, defina um nome para o projeto e escolha a pasta onde ele será salvo.\n\n    3.  Finalize clicando em **\"`Create Project`\"**.\n\n    ## **Criando Scripts e Documentos**\n\n    Após criar o projeto, é hora de começar a construir os arquivos onde serão escritos os códigos, comentários e interpretações.\n\n    1.  **Scripts R**\n\n        Para criar um novo script, onde você pode escrever e testar seus códigos em R:\n\n        Vá em **`File >New File >R Script`**.\n\n        Esse tipo de arquivo é útil para testar funções, fazer experimentos com códigos e salvar pequenos trechos de análise.\n\n    2.  **Documentos Quarto (.qmd)**\n\n        Durante a disciplina, utilizaremos principalmente documentos no formato Quarto (`.qmd`). Esses arquivos permitem integrar texto, código e resultados (como gráficos e tabelas) no mesmo lugar. Para criar um documento nesse formato:\n\n        1.  Acesse **`File >New File >Quarto Document…`**.\n        2.  Na janela seguinte, defina um **título** e o **nome do autor**.\n\n    3.  Clique em **`Create`**.\n\n## Importação e Exploração de Dados\n\nImportamos e exploramos o conjunto de dados `Orange`, que já está disponível por padrão no R. Esse banco contém informações sobre o crescimento de árvores cítricas, como a idade e a circunferência do tronco.\n\nAqui foi criado um objeto chamado **DADOS** que recebe o banco de dados `Orange`. O simbolo \"`<-`\" é o operador de atribuição do R. Atribuindo o valor da direita ao objeto da esquerda. O operador `$` foi utilizado para acessar colunas específicas, como circumference. Também utilizamos a função plot() para gerar um gráfico simples dessa variável.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados <- Orange\nOrange\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Tree  age circumference\n1     1  118            30\n2     1  484            58\n3     1  664            87\n4     1 1004           115\n5     1 1231           120\n6     1 1372           142\n7     1 1582           145\n8     2  118            33\n9     2  484            69\n10    2  664           111\n11    2 1004           156\n12    2 1231           172\n13    2 1372           203\n14    2 1582           203\n15    3  118            30\n16    3  484            51\n17    3  664            75\n18    3 1004           108\n19    3 1231           115\n20    3 1372           139\n21    3 1582           140\n22    4  118            32\n23    4  484            62\n24    4  664           112\n25    4 1004           167\n26    4 1231           179\n27    4 1372           209\n28    4 1582           214\n29    5  118            30\n30    5  484            49\n31    5  664            81\n32    5 1004           125\n33    5 1231           142\n34    5 1372           174\n35    5 1582           177\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(dados$circumference)\n```\n\n::: {.cell-output-display}\n![](Aula1_files/figure-html/unnamed-chunk-1-1.png){width=1344}\n:::\n:::\n\n\n## Manipulação de dados\n\nNesta etapa, trabalhamos com a criação de novos objetos a partir do conjunto de dados original `dados`. Essas ações são úteis para manipular partes específicas da base ou realizar transformações de maneira organizada.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados2 <- dados\n```\n:::\n\n\nAlém disso, foi extraida apenas a coluna `circumference` e armazenamos seus valores em um novo vetor chamado `circ`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncirc <- dados$circumference\ncirc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  30  58  87 115 120 142 145  33  69 111 156 172 203 203  30  51  75 108 115\n[20] 139 140  32  62 112 167 179 209 214  30  49  81 125 142 174 177\n```\n\n\n:::\n:::\n\n\nCom base nesse vetor, criamos um novo chamado `circ2`, no qual cada valor foi acrescido de 10 cm. Essa modificação simula um cenário hipotético de crescimento adicional no diâmetro dos troncos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncirc2 <- circ+10\ncirc2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  40  68  97 125 130 152 155  43  79 121 166 182 213 213  40  61  85 118 125\n[20] 149 150  42  72 122 177 189 219 224  40  59  91 135 152 184 187\n```\n\n\n:::\n:::\n\n\nTambem foi realizada a transformação logarítmica da variavél `circunferência`, utilizando a função `log()` criando uma nova coluna no próprio `data frame`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Tree  age circumference\n1     1  118            30\n2     1  484            58\n3     1  664            87\n4     1 1004           115\n5     1 1231           120\n6     1 1372           142\n7     1 1582           145\n8     2  118            33\n9     2  484            69\n10    2  664           111\n11    2 1004           156\n12    2 1231           172\n13    2 1372           203\n14    2 1582           203\n15    3  118            30\n16    3  484            51\n17    3  664            75\n18    3 1004           108\n19    3 1231           115\n20    3 1372           139\n21    3 1582           140\n22    4  118            32\n23    4  484            62\n24    4  664           112\n25    4 1004           167\n26    4 1231           179\n27    4 1372           209\n28    4 1582           214\n29    5  118            30\n30    5  484            49\n31    5  664            81\n32    5 1004           125\n33    5 1231           142\n34    5 1372           174\n35    5 1582           177\n```\n\n\n:::\n\n```{.r .cell-code}\ndados$logcirc <- log(dados$circumferenc)\ndados\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Tree  age circumference  logcirc\n1     1  118            30 3.401197\n2     1  484            58 4.060443\n3     1  664            87 4.465908\n4     1 1004           115 4.744932\n5     1 1231           120 4.787492\n6     1 1372           142 4.955827\n7     1 1582           145 4.976734\n8     2  118            33 3.496508\n9     2  484            69 4.234107\n10    2  664           111 4.709530\n11    2 1004           156 5.049856\n12    2 1231           172 5.147494\n13    2 1372           203 5.313206\n14    2 1582           203 5.313206\n15    3  118            30 3.401197\n16    3  484            51 3.931826\n17    3  664            75 4.317488\n18    3 1004           108 4.682131\n19    3 1231           115 4.744932\n20    3 1372           139 4.934474\n21    3 1582           140 4.941642\n22    4  118            32 3.465736\n23    4  484            62 4.127134\n24    4  664           112 4.718499\n25    4 1004           167 5.117994\n26    4 1231           179 5.187386\n27    4 1372           209 5.342334\n28    4 1582           214 5.365976\n29    5  118            30 3.401197\n30    5  484            49 3.891820\n31    5  664            81 4.394449\n32    5 1004           125 4.828314\n33    5 1231           142 4.955827\n34    5 1372           174 5.159055\n35    5 1582           177 5.176150\n```\n\n\n:::\n\n```{.r .cell-code}\ndados$circumference\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  30  58  87 115 120 142 145  33  69 111 156 172 203 203  30  51  75 108 115\n[20] 139 140  32  62 112 167 179 209 214  30  49  81 125 142 174 177\n```\n\n\n:::\n:::\n\n\nA função `attach()` permite acessar diretamente as colunas de interesse sem precissar usar o `$`. Assim você pode chamar apenas a coluna especifica sem precisar digitar \"`dados$`...\". E `detach()` desfaz o attach, sendo necessario voltar a usar o \\$ para acessar as colunas de interesse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattach(dados) \ncircumference\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  30  58  87 115 120 142 145  33  69 111 156 172 203 203  30  51  75 108 115\n[20] 139 140  32  62 112 167 179 209 214  30  49  81 125 142 174 177\n```\n\n\n:::\n\n```{.r .cell-code}\ndetach(dados)\n```\n:::\n\n\n## Instalação e Uso de Pacotes\n\nPara utilizar funções que não estão disponíveis por padrão no R, é necessário instalar e carregar **pacotes** adicionais.\n\nAntes de usar um pacote, é necessário instalá-lo no sistema, isso pode ser feito de forma manual:\n\n`Packages>` `Install>` Na linha `Packages`, digite o nome do pacote de interesse, por exemplo, `Agricolae>` `Install.`\n\nE támbem pode ser instalado usando a função:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"agricolae\", repos = \"https://cloud.r-project.org\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npacote 'agricolae' desempacotado com sucesso e somas MD5 verificadas\n\nOs pacotes binários baixados estão em\n\tC:\\Users\\lucas\\AppData\\Local\\Temp\\Rtmp4K8GbR\\downloaded_packages\n```\n\n\n:::\n:::\n\n\nApós a instalação, o pacote pode ser carregado em qualquer sessão do R usando a função `library()` .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(agricolae)\n```\n:::\n\n\nO pacote carregado na aula intitulado `agricolae` é utilizado principalmente para análises experimentais aplicadas à agricultura. Entre suas funcionalidades, estão testes estatísticos, cálculos de variáveis agronômicas e acesso a conjuntos de dados internos, exemplo `corn`.\n\nApós carregar o pacote, são criados dois vetores: `dates`, contendo os dias de avaliação, e `severity`, com os valores de severidade da doença em cada data. A função `audpc()` (Área Abaixo da Curva de Progresso da Doença) é utilizada para calcular uma medida acumulada da severidade ao longo do tempo. Esse valor resume a evolução da doença em um único número:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- c(14,21,28) #cria um vetor \"c()\"\ndates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14 21 28\n```\n\n\n:::\n\n```{.r .cell-code}\nseverity <- c(40,80,90)\nseverity\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40 80 90\n```\n\n\n:::\n\n```{.r .cell-code}\naudpc(severity, dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nevaluation \n      1015 \n```\n\n\n:::\n\n```{.r .cell-code}\ndata(corn)\nstr(corn)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t34 obs. of  3 variables:\n $ method     : int  1 1 1 1 1 1 1 1 1 2 ...\n $ observation: int  83 91 94 89 89 96 91 92 90 91 ...\n $ rx         : num  11 23 28.5 17 17 31.5 23 26 19.5 23 ...\n```\n\n\n:::\n:::\n\n\nA função `str()` (estrutura) mostra as variáveis presentes no conjunto, seus tipos e alguns exemplos de dados.\n\n## Visualização de Dados com `tidyverse`\n\nO `tidyverse` é uma coleção de pacotes integrados (como `ggplot2`, `dplyr`, `readr`, entre outros) voltados para a manipulação, análise e visualização de dados.\n\nApós carregar o pacote, são definidos dois vetores com valores simulados:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndates <- c(7,14,21,28,35,42)\nseverity <- c(0.1,5,10,35,50,60)\n```\n:::\n\n\nEsses vetores representam a severidade de uma doença observada ao longo de dias após o plantio. Para trabalhar com esses dados de maneira estruturada, cria-se um `data.frame` nomeado como `data_curva`, que organiza os vetores em forma de tabela:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_curva <- data.frame(dates, severity)\ndata_curva\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dates severity\n1     7      0.1\n2    14      5.0\n3    21     10.0\n4    28     35.0\n5    35     50.0\n6    42     60.0\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(data_curva)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t6 obs. of  2 variables:\n $ dates   : num  7 14 21 28 35 42\n $ severity: num  0.1 5 10 35 50 60\n```\n\n\n:::\n:::\n\n\n## Criação de Gráfico com `ggplot2`\n\nO pacote `ggplot2`, incluído no `tidyverse`, permite criar gráficos personalizados e informativos. O seguinte código produz um gráfico combinando barras, linha e pontos, representando a evolução da severidade ao longo do tempo.\n\nPrimeiro, uma nova variável `severity2` é adicionada com valores ajustados de severidade:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_curva |> \n  mutate(severity2 = c(1, 10, 35, 58, 70, 79)) |> \n  ggplot(aes(x = dates, y = severity2))+\n  geom_col()+\n  geom_line(linewidth = 2, color = \"#FA8775\") +\n  geom_point(size = 4, color = \"#FA8775\") +\n  \n  theme_classic(base_size = 14)+\n  labs(x = \"dia após plantio\",\n       y = \"Severidade (%)\")+\n  scale_y_continuous (limits = c(0, 100), n.breaks = 10)+\n  scale_x_continuous(n.breaks = 8)\n```\n\n::: {.cell-output-display}\n![](Aula1_files/figure-html/unnamed-chunk-12-1.png){width=1344}\n:::\n:::\n\n\nPara esse gráfico foi utilizado as seguintes funções:\n\n-   `mutate()`: cria a nova coluna `severity2`.\n\n-   `geom_col()`: plota colunas verticais para representar os dados.\n\n-   `geom_line()` e `geom_point()`: adicionam uma linha e pontos sobre as colunas, enfatizando a tendência dos dados.\n\n-   `theme_classic()`: define um estilo visual limpo.\n\n-   `labs()`: define os rótulos dos eixos.\n\n-   `scale_*_continuous()`: ajusta os eixos para facilitar a leitura.\n",
    "supporting": [
      "Aula1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}